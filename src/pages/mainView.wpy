<template>
    <view class="container">
        <view class="flex flex-row wrapper" style="align-items:initial">
          <view class="left">
            <view class="avatar-wrapper">
              <open-data type="userAvatarUrl" style="width:79rpx"></open-data>
            </view>
          </view>
          <view class="right">
            <view class="nickName-wrapper">
              <open-data type="userNickName"></open-data>
            </view>
            <view class="flex flex-row mainImg-wrapper">
              <view style="position: relative"  @tap="onTapImg({{item}})" wx:key="key"  wx:for = "{{imgData}}">
                <image class="mainImg" wx:if ="{{imgData.length > 0}}"  src="{{item.src}}" mode="aspectFit" lazy-load="false" /></image>
                <view class="icon-success" wx:if="{{item.drewPath}}">
                  <image src="../assets/img/success.png" mode="scaleToFill"></image>
                </view>
              </view>
            </view>
          </view>
        </view>
        <view class="tips">
          <view>Tips:①点击图片 ==> 选择偶数张相片(最多8张) ==> 编辑</view>
          <view style="padding-left:52rpx">②长按图片重新编辑。</view>
        </view>
        <view style="width:100%">
          <view class="zan-btns">
            <view style="color : #ccc; font-size: 32rpx; text-align:center;margin-bottom:30rpx">
              已编辑 {{edited}} / {{imgData.length}}
            </view>

            <button class="zan-btn zan-btn--primary" @tap="save">一键保存</button>
            <button class="zan-btn zan-btn--primary" @tap="changeMainImg" >{{edited==0? '选择主图' : '更换主图'}}</button>
            <button class="zan-btn" open-type="getUserInfo" bindgetuserinfo="avatarForMainImg" wx:if="{{edited==0}}">头像当主图</button>

            <button class="zan-btn" @tap="preview" wx:if="{{edited>0}}">预览</button>
          </view>
        </view>
        <view class="canvas-wrapper">
          <canvas canvas-id="canvas" style="width:{{width}}px;height:{{height}}px" disable-scroll="true"></canvas>
        </view>
        <myCanvas></myCanvas>
    </view>
</template>


<script>
import wepy from 'wepy';
import { toast, chooseImage, showLoading, showModel,getHandImgHD } from '@/assets/js/util.js';
import { _previewImage, _saveImageToPhotosAlbum } from "@/assets/js/canvasApi.js";
import myCanvas from "@/components/myCanvas";
let deviceWidth = wx.getSystemInfoSync().windowWidth;
let cutLen = 80;

export default class MainView extends wepy.page {
  config = {
    disableScroll: true
  };
  components = { myCanvas };
  data = {
    imgSrc: '../assets/img/test_min.jpg',
    width: deviceWidth - cutLen,
    height: deviceWidth - cutLen,
    imgData: [],
    changeMainData:[]
  };
  computed = {
    edited() {
      return this.getAllDrewPath().length
    }
  }

  methods = {
    onTapImg(item) {
      if (!item.info) {
        chooseImage(8)
          .then(res => {
            showLoading()
            var len = res.tempFilePaths.length;
            if (len > 0 && len % 2 == 0) {
              this.$preload({ imageArr: res.tempFilePaths, mainImg: item });
              wx.navigateTo({ url: 'edit' });
            } else {
              toast('请选择偶数张相片，最多8张');
            }
            wepy.hideLoading()
          })
          .catch(err => {
            console.log(err)
            wepy.hideLoading()
          });
      } else {
        this.$preload({ allImgInfo: item.info, mainImg: item });
        wx.navigateTo({ url: 'edit' });
      }
    },
    //预览全部已编辑好的图片
    preview() {
      let previewArr = this.getAllDrewPath()
      _previewImage({
        urls: previewArr
      })
    },
    //一键保存所有的已编辑好的图片。
    async save() {
      let saveArr = this.getSavePath();
      let isSuccess = true;
      showLoading()
      for(let i = 0,len = saveArr.length; i<len; i++) {
        await _saveImageToPhotosAlbum({
          filePath: saveArr[i]
        }).catch(err => {
          isSuccess = false
          showModel({
            content: "保存失败，请检查小程序权限（右上角三个点 ==> 关于趣圈阁 ==> 右上角 ==> 设置 ==> 保存到相册）"
          })
        })
        if(!isSuccess) {
          wepy.hideLoading();
          return
        }
      }
      wepy.hideLoading();
      toast("已编辑的图片，已保存到相册")
    },

    changeMainImg() {
      chooseImage(1)
        .then((res)=>{
          let inputImg = res.tempFilePaths[0]
          this.changeMainData.length = 0;
          this.$preload({src: inputImg})
          wepy.navigateTo({ url: 'cut?src=' + inputImg });
        })
    },
  };

  onLoad(param, data) {
    this.imgData.length = 0;
    if (data.preload) {
      let inputData = data.preload;
      this.imgSrc = inputData.imgSrc;
    }
  }

  onReady() {
    this.ctx = wx.createCanvasContext('canvas', this);
    this.drawMainImg((res, index) => {
      this.imgData.push({ src: res.tempFilePath });
      this.$apply();
    })
    console.log(this.imgData)
    this.$broadcast("myCanvasInit",{
      width:800,
      height:800
    })
  }
  
  drawMainImg(fn){
    return new Promise((resolve, reject)=>{
      var self = this;
      function* step() {
        var num = 0;
        var x = 0,
            y = 0,
            len = self.width / 3;
        while (num < 9) {
          if (num % 3 == 0) {
            num === 0 ? y : (y += len);
            x = 0;
          } else {
            num === 0 ? x : (x += len);
          }
          let res = yield self.intercept(x, y, len);
          fn && fn(res,num) //必须是同步的fn
          num++;
          if(num >= 9){
            resolve()
          }
        }
      }
     
      this.it = step();
      this.drawImg().then((res) => {
        this.it.next();
      });
    })
  }

  //将主图使用canvas生成，然后分割成9份
  drawImg() {
    return new Promise((resolve, reject) => {
      let ouput;
      let width, height;
      let ctx = this.ctx;
      wepy.getImageInfo({
        src: this.imgSrc, //图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径,
        success: res => {
          ouput = res;
          console.log(res)
          let path  = this.imgSrc
          if(/^(http|wxfile:)/.test(res.path)){
            path = res.path
          }
          ctx.setFillStyle('red');
          ctx.drawImage(path, 0, 0, this.width, this.height);
          ctx.draw(false, () => {
            resolve(res);
          });
        },
        fail: err => {
          reject(err);
        }
      });
    });
  }
  //分割
  intercept(x, y, len) {
    let ctx = this.ctx;
    wx.canvasToTempFilePath({
      canvasId: 'canvas',
      x,
      y,
      width: len,
      height: len,
      quality: 1,
      success: res => {
        this.it.next(res);
      }
    });
  }

  //暴露接口供其他页面修改本页数据。
  setImgData(mainImgSrc, obj) {
    let target = this.imgData.filter(item => item.src == mainImgSrc)[0]
    target.info = obj.info;
    target.drewPath = obj.drewPath;
    this.$apply()
  }

  setMainImg(inputImg){
    this.imgSrc = inputImg;
    setTimeout(()=>{
      this.drawMainImg((res, index) => {
        let item  = this.imgData[index];
        let info = item.info;
        item.src = res.tempFilePath;
        this.$apply()
        if(typeof info !== 'undefined'){
          let info_main = info[(info.length-1)/2]
          if(info_main.isMain){
            info_main.path = res.tempFilePath;
            info_main.basePath = res.tempFilePath;
            this.changeMainData.push({
              info,
              index
            })
          }
        }
      }).then((res)=>{
        let self = this;
        async function run(){
          let arr = self.changeMainData;
          let len = arr.length;
          for(let i = 0; i< len; i++) {
            let item = arr[i]
            self.$invoke("myCanvas","setWidthHeight",{
              width: 800,
              height: 800 * item.info.length
            })
            if(i==0){
              await self.promiseInvoke("myCanvas", "draw", item.info).then((res)=>{
                self.imgData[item.index].drewPath = res.tempFilePath
              })
            }
            await self.promiseInvoke("myCanvas", "draw", item.info).then((res)=>{
              self.imgData[item.index].drewPath = res.tempFilePath
            })
          } 
        }
        run()
        
      }) 
    }, 500)
    
  }
  
  getAllDrewPath() {
     return this.imgData.filter((val) => {
        if(val.drewPath) return val
     }).map((item) => {
       return item.drewPath
     })
  }
  getSavePath(){
    return this.imgData.map((val)=>{
      let path
      console.log(val)
      path = val.drewPath? val.drewPath : val.src
      return path
    })
  }

  promiseInvoke(){
    let args = [].slice.call(arguments)
    return new Promise((resolve, reject) => {
      args.push((some)=>{
        resolve(some)
      })
      this.$invoke.apply(this, args)
    })
  }

  async avatarForMainImg(res) {
    showLoading()
    if(res.detail.errMsg == "getUserInfo:ok"){
      var avatarUrl =  getHandImgHD(res.detail.userInfo.avatarUrl);
      this.imgSrc = avatarUrl
      this.imgData = [];
      await this.drawMainImg((res, index) => {
        this.imgData.push({ src: res.tempFilePath });
        this.$apply();
      })
    }else{
      showModel({
        content: "设置失败，请检查小程序权限（右上角三个点 ==> 关于趣圈阁 ==> 右上角 ==> 设置 ==> 使用我的用户信息）"
      })
    }
    
    wepy.hideLoading();
    
  }
}
</script>

<style lang="less">
page {
  background-color: #fff;
}
.wrapper{
  width: 100%; 
  justify-content: flex-start;
  font-size: 0;
  padding-bottom: 66rpx;
  border-bottom: 2rpx  solid #eaeaea ;
  .right{
    padding-top: 30rpx
  }
}
.mainImg {
  position: relative;
  width: 156rpx;
  height: 156rpx;
  background-color: #fff;
}
.mainImg-wrapper {
  position: relative;
  width: 486rpx;
  height: 486rpx;
  background-color: #fff;
  margin: 0 auto;
  flex-wrap: wrap;
  align-content: space-between;
  justify-content: space-between;
  font-size: 0;
}
.canvas-wrapper {
  position:absolute;
  left: 99999px;
  top:99999px;
  width: 0px;
  height: 0px;
  overflow: hidden;
}
.info {
  box-shadow: 0 0 7px #fff;
}

.icon-success{
  position:absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, .4);
  image {
    position: absolute;
    width: 50rpx;
    height: 50rpx;
    transform: translateX(-50%) translateY(-50%);
    left: 50%;
    top: 50%
  }
}

.avatar-wrapper{
  width: 79rpx;
  height: 79rpx;
  font-size: 0;
  padding-top: 30rpx;
  padding-left: 30rpx;
  padding-right: 20rpx;
  display: inline-block
}
.nickName-wrapper{
  display: inline-block;
  font-size: 0;
  vertical-align: top;
  color: #385081;
  margin-bottom: 15rpx;
  open-data,text{
    font-size: 30rpx
  }
}
.tips {
  font-size: 24rpx;
  color: #ccc
}
</style>



