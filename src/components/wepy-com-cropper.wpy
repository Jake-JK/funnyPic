<template>
  <view  style="position:relative;width:100%;height:100%">
    <canvas
      class="cropper"
      disable-scroll="true"
      @touchstart="ts"
      @touchmove="tm"
      @touchend="te"
      style="width:{{width}}px;height:{{height}}px;background-color: rgba(0, 0, 0, 0.8)"
      @error="canvasError"
      canvas-id="cropper">
    </canvas>
    <view class="target_canvas">
      <canvas style="width:{{width}}px;height:{{height}}px"  canvas-id="target"></canvas>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import WeCropper from 'we-cropper'
let systemInfo = wepy.getSystemInfoSync();
let devicePixelRatio = systemInfo.pixelRatio
export default class Cropper extends wepy.component {
  data = {
    Cropper: null,
    id: 'cropper',
    disable: true
  }

  props = {
    options: Object
  }
  
  computed = {
    width () {
      return this.options.width
    },
    height () {
      return this.options.height
    }
  }

  methods = {
    ts (e) {
      this.Cropper.touchStart(e)
    },
    tm (e) {
      this.Cropper.touchMove(e)
    },
    te (e) {
      this.Cropper.touchEnd(e)
    },
    canvasError (e) {
      console.error(e.detail.errMsg)
    }
  }

    pushOrigin (src) {
      this.src = src
      this.Cropper.pushOrign(src)
    } 
    updateCanvas () {
      this.Cropper.updateCanvas()
    }
    getCropperImage (fn, ev) {
      let { imgLeft, imgTop, scaleWidth, scaleHeight } = this.Cropper // 获取图片在原画布坐标位置及宽高
      let { x, y, width, height } = this.Cropper.cut // 获取裁剪框位置及大小
      console.log(x, y, width, height, imgLeft, imgTop, scaleWidth, scaleHeight)
      // devicePixelRatio= 1
      // 所有参数乘设备像素比
      // imgLeft = imgLeft * devicePixelRatio
      // imgTop = imgTop * devicePixelRatio
      // scaleWidth = scaleWidth * devicePixelRatio
      // scaleHeight = scaleHeight * devicePixelRatio
      // x = x * devicePixelRatio
      // y = y * devicePixelRatio
      // width = width * devicePixelRatio
      // height = height * devicePixelRatio
      // console.log(imgLeft,imgTop,scaleWidth,scaleHeight,x, y,width,height)
      const targetCtx = wx.createCanvasContext('target') // 这里是目标canvas画布的id值
      targetCtx.drawImage(this.src, imgLeft, imgTop, scaleWidth, scaleHeight) // tmp代表被裁剪图片的临时路径
      targetCtx.draw(false, ()=>{
        wx.canvasToTempFilePath({
          canvasId: 'target',
          x,
          y,
          width,
          height,
          success (res) {
            const tmpPath = res.tempFilePath
            fn(tmpPath)
          }
        })
      })
      // this.Cropper.getCropperImage(fn)
    }
    getCropperBase64 (fn, ev) {
      this.Cropper.getCropperImage(fn)
    }

  onLoad () {
    const options = this.options
    options.id = this.id
    this.Cropper = new WeCropper(options)
    .on('ready', (...args) => {
      this.$emit('ready', ...args) 
    })
    .on('beforeImageLoad', (...args) => {
      this.$emit('beforeImageLoad', ...args)
    })
    .on('imageLoad', (...args) => {
      this.$emit('imageLoad', ...args)
    })
    .on('beforeDraw', (...args) => {
      this.$emit('beforeDraw', ...args)
    })
    .updateCanvas()
  }
}
</script>

<style>
.target_canvas{
  position: absolute;
  width:0;
  height: 0;
  overflow: hidden;
  left: 99999px;
  top: 99999px;
}
</style>
