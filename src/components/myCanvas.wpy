

<template>
    <scroll-view scroll-y class="canvas-wrapper {{isShow? 'show' : 'hide'}}">
        <canvas canvas-id="mycanvas"  style="width:{{width}}px;height:{{height}}px" disable-scroll="true"></canvas>
    </scroll-view>
</template>

<script>
/**
 * fit 模式：把图片按长边按比例完成的显示图片
 *
 * full 模式 只保证按短边来把图片完成的显示出来 其他部分会被裁剪掉，获取中间部分
 *
 * 裁剪模式
 *
 */
import wepy from 'wepy';
import { drawImg, _draw, _canvasToTempFilePath, _saveImageToPhotosAlbum } from '@/assets/js/canvasApi.js';
import { showLoading, toast } from '@/assets/js/util.js';
export default class MyCanvas extends wepy.component {
  data = {
    width: 700,
    height: 700,
    isShow: false,
    drewPath: null
  };
  props = {
    id: {
      type: String,
      default: 'mycanvas'
    }
  };
  methods = {
    init(option) {
      console.log(option);
      this.width = option.width;
      this.height = option.height;
      this.ctx = wx.createCanvasContext("mycanvas", this)
      this.$apply();
    },
    async draw(allImgInfo, cb) {
      showLoading()
      let self = this
      this.allImgInfo = allImgInfo;
      this.setBackGround()
      let imgs = this.allImgInfo;
      let ctx = this.ctx;
      let beginDy = 0
      for(let i = 0; i < imgs.length; i++){
        await drawImg(this.ctx,this.calcDrawParam(imgs[i],beginDy))
        beginDy += this.width
      }
      await _draw(ctx, false);
      let res = await _canvasToTempFilePath({
        canvasId: "mycanvas",
        x:0,
        y:0,
        width: self.width,
        height: self.height,
        fileType: "jpg",
        quality: 1,
      })
      //保存路径。
      this.drewPath = res.tempFilePath
      this.$emit("setDrewPath", this.drewPath)
      cb && cb(res)
      wepy.hideLoading();
    },


    previewImage(allImgInfo) {
      this.methods.draw.call(this, allImgInfo, (res) => {
        wx.previewImage({
          urls: [res.tempFilePath]
        })
      })
    },

    saveImage(allImgInfo) {
      this.methods.draw.call(this, allImgInfo, (res) => {
        _saveImageToPhotosAlbum({
          filePath: res.tempFilePath
        }).then((res) => {
          toast("保存成功。")
        })
      })
    }
  };

  calcDrawParam(params, beginDy) {
    //fit模式  先判断图片方向 大于1 纵向 小于1 横向
    let direction = params.baseHeight / params.baseWidth;
    let imageResource = params.path, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight;
    sx = 0;
    sy = 0;
    dy = beginDy
    if(params.isCut){
      dx = 0;
      dWidth = this.width;
      dHeight = this.width;
      sWidth = params.width;
      sHeight = params.height;
    }else if(params.mode === "aspectFit"){
      sWidth = params.baseWidth;
      sHeight = params.baseHeight;
      dx = 0;
      dWidth = this.width;
      dHeight = dWidth * direction;
      dy += (this.width - dHeight)/2;
    }else if(params.mode === "aspectFill"){
      let len = direction >=1 ? params.baseWidth : params.baseHeight;
      dx = 0;
      dWidth = this.width;
      dHeight = this.width;
      sWidth = len;
      sHeight = len;
      sx = direction < 1? (params.baseWidth - len)/2 : 0 ;
      sy = direction > 1? (params.baseHeight - len)/2 : 0 ;
    }
    return { imageResource , sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight }
  }

  

  setBackGround(){
    let ctx = this.ctx;
    ctx.setFillStyle("#fff");
    ctx.fillRect(0, 0, this.width, this.height);
  }

  onLoad() {
   
  }

}
</script>


<style lang="less">
.canvas-wrapper {
  position: absolute;
  width:0;
  height: 0;
  overflow: hidden;
  left: 99999px;
  top: 99999px;
}



.show {
  width: 100% !important;
  height: initial !important;
  overflow: auto !important;
  background-color: #ffffff;
  overflow: auto;
  display: flex;
  align-items: center;
  justify-content: center;
  canvas {
    background-color: #000;
  }
}
.hide {
  // flex: 0;
  // overflow: hidden !important;
}

</style>

